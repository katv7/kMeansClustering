[["index.html", "Social Networking profile words analysis: Clustering with H2o package and base R 1 Loading required libraries and read dataset 1.1 importing csv file", " Social Networking profile words analysis: Clustering with H2o package and base R Varun Katyal 08/01/2021 1 Loading required libraries and read dataset library(data.table) library(mltools) ## Warning: package &#39;mltools&#39; was built under R version 4.0.4 library(h2o) library(dplyr) library(ggplot2) 1.1 importing csv file sns &lt;- read.csv(&#39;data.csv&#39;,stringsAsFactors =T ) str(sns) ## &#39;data.frame&#39;: 30000 obs. of 40 variables: ## $ gradyear : int 2006 2006 2006 2006 2006 2006 2006 2006 2006 2006 ... ## $ gender : Factor w/ 2 levels &quot;F&quot;,&quot;M&quot;: 2 1 2 1 NA 1 1 2 1 1 ... ## $ age : num 19 18.8 18.3 18.9 19 ... ## $ friends : int 7 0 69 0 10 142 72 17 52 39 ... ## $ basketball : int 0 0 0 0 0 0 0 0 0 0 ... ## $ football : int 0 1 1 0 0 0 0 0 0 0 ... ## $ soccer : int 0 0 0 0 0 0 0 0 0 0 ... ## $ softball : int 0 0 0 0 0 0 0 1 0 0 ... ## $ volleyball : int 0 0 0 0 0 0 0 0 0 0 ... ## $ swimming : int 0 0 0 0 0 0 0 0 0 0 ... ## $ cheerleading: int 0 0 0 0 0 0 0 0 0 0 ... ## $ baseball : int 0 0 0 0 0 0 0 0 0 0 ... ## $ tennis : int 0 0 0 0 0 0 0 0 0 0 ... ## $ sports : int 0 0 0 0 0 0 0 0 0 0 ... ## $ cute : int 0 1 0 1 0 0 0 0 0 1 ... ## $ sex : int 0 0 0 0 1 1 0 2 0 0 ... ## $ sexy : int 0 0 0 0 0 0 0 1 0 0 ... ## $ hot : int 0 0 0 0 0 0 0 0 0 1 ... ## $ kissed : int 0 0 0 0 5 0 0 0 0 0 ... ## $ dance : int 1 0 0 0 1 0 0 0 0 0 ... ## $ band : int 0 0 2 0 1 0 1 0 0 0 ... ## $ marching : int 0 0 0 0 0 1 1 0 0 0 ... ## $ music : int 0 2 1 0 3 2 0 1 0 1 ... ## $ rock : int 0 2 0 1 0 0 0 1 0 1 ... ## $ god : int 0 1 0 0 1 0 0 0 0 6 ... ## $ church : int 0 0 0 0 0 0 0 0 0 0 ... ## $ jesus : int 0 0 0 0 0 0 0 0 0 2 ... ## $ bible : int 0 0 0 0 0 0 0 0 0 0 ... ## $ hair : int 0 6 0 0 1 0 0 0 0 1 ... ## $ dress : int 0 4 0 0 0 1 0 0 0 0 ... ## $ blonde : int 0 0 0 0 0 0 0 0 0 0 ... ## $ mall : int 0 1 0 0 0 0 2 0 0 0 ... ## $ shopping : int 0 0 0 0 2 1 0 0 0 1 ... ## $ clothes : int 0 0 0 0 0 0 0 0 0 0 ... ## $ hollister : int 0 0 0 0 0 0 2 0 0 0 ... ## $ abercrombie : int 0 0 0 0 0 0 0 0 0 0 ... ## $ die : int 0 0 0 0 0 0 0 0 0 0 ... ## $ death : int 0 0 1 0 0 0 0 0 0 0 ... ## $ drunk : int 0 0 0 0 1 1 0 0 0 0 ... ## $ drugs : int 0 0 0 0 1 0 0 0 0 0 ... "],["exploratory-data-analysis.html", "2 Exploratory Data Analysis 2.1 distribution of gender 2.2 Distribution of No. of Friends 2.3 converting grad year into factor variable 2.4 converting categorical variable into numeric(one-hot encoding) using mltools package 2.5 removing rows containing NAs 2.6 Removing age outliers 2.7 normalizing Profiles interest variables", " 2 Exploratory Data Analysis 2.1 distribution of gender sns %&gt;% group_by(gender) %&gt;% summarise(number=n()) ## # A tibble: 3 x 2 ## gender number ## * &lt;fct&gt; &lt;int&gt; ## 1 F 22054 ## 2 M 5222 ## 3 &lt;NA&gt; 2724 High proportion of females compared to males 2.2 Distribution of No. of Friends ggplot(data = sns,aes(x=friends))+geom_density()+ xlim(c(0,200))+ggtitle(&quot;Distribution of Number of Friends&quot;) ## Warning: Removed 136 rows containing non-finite values (stat_density). * Most have friends from 1-50, while 100 or more is rare 2.3 converting grad year into factor variable sns$gradyear &lt;- factor(sns$gradyear) 2.4 converting categorical variable into numeric(one-hot encoding) using mltools package 2.5 removing rows containing NAs sns &lt;- data.table(sns) sns_new &lt;- sns[complete.cases(sns),] sns_new &lt;- one_hot(sns_new,sparsifyNAs = T) str(sns_new) ## Classes &#39;data.table&#39; and &#39;data.frame&#39;: 24005 obs. of 44 variables: ## $ gradyear_2006: int 1 1 1 1 1 1 1 1 1 1 ... ## $ gradyear_2007: int 0 0 0 0 0 0 0 0 0 0 ... ## $ gradyear_2008: int 0 0 0 0 0 0 0 0 0 0 ... ## $ gradyear_2009: int 0 0 0 0 0 0 0 0 0 0 ... ## $ gender_F : int 0 1 0 1 1 0 1 1 1 1 ... ## $ gender_M : int 1 0 1 0 0 1 0 0 0 0 ... ## $ age : num 19 18.8 18.3 18.9 18.9 ... ## $ friends : int 7 0 69 0 72 17 52 39 8 21 ... ## $ basketball : int 0 0 0 0 0 0 0 0 0 0 ... ## $ football : int 0 1 1 0 0 0 0 0 0 1 ... ## $ soccer : int 0 0 0 0 0 0 0 0 0 0 ... ## $ softball : int 0 0 0 0 0 1 0 0 0 0 ... ## $ volleyball : int 0 0 0 0 0 0 0 0 0 0 ... ## $ swimming : int 0 0 0 0 0 0 0 0 0 0 ... ## $ cheerleading : int 0 0 0 0 0 0 0 0 0 0 ... ## $ baseball : int 0 0 0 0 0 0 0 0 0 0 ... ## $ tennis : int 0 0 0 0 0 0 0 0 0 0 ... ## $ sports : int 0 0 0 0 0 0 0 0 0 0 ... ## $ cute : int 0 1 0 1 0 0 0 1 0 0 ... ## $ sex : int 0 0 0 0 0 2 0 0 0 0 ... ## $ sexy : int 0 0 0 0 0 1 0 0 0 0 ... ## $ hot : int 0 0 0 0 0 0 0 1 0 0 ... ## $ kissed : int 0 0 0 0 0 0 0 0 0 0 ... ## $ dance : int 1 0 0 0 0 0 0 0 0 0 ... ## $ band : int 0 0 2 0 1 0 0 0 0 0 ... ## $ marching : int 0 0 0 0 1 0 0 0 0 0 ... ## $ music : int 0 2 1 0 0 1 0 1 0 0 ... ## $ rock : int 0 2 0 1 0 1 0 1 0 0 ... ## $ god : int 0 1 0 0 0 0 0 6 0 0 ... ## $ church : int 0 0 0 0 0 0 0 0 0 1 ... ## $ jesus : int 0 0 0 0 0 0 0 2 0 0 ... ## $ bible : int 0 0 0 0 0 0 0 0 0 0 ... ## $ hair : int 0 6 0 0 0 0 0 1 0 0 ... ## $ dress : int 0 4 0 0 0 0 0 0 0 0 ... ## $ blonde : int 0 0 0 0 0 0 0 0 0 0 ... ## $ mall : int 0 1 0 0 2 0 0 0 0 0 ... ## $ shopping : int 0 0 0 0 0 0 0 1 0 0 ... ## $ clothes : int 0 0 0 0 0 0 0 0 0 0 ... ## $ hollister : int 0 0 0 0 2 0 0 0 0 0 ... ## $ abercrombie : int 0 0 0 0 0 0 0 0 0 0 ... ## $ die : int 0 0 0 0 0 0 0 0 0 0 ... ## $ death : int 0 0 1 0 0 0 0 0 0 0 ... ## $ drunk : int 0 0 0 0 0 0 0 0 0 0 ... ## $ drugs : int 0 0 0 0 0 0 0 0 0 0 ... ## - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr&gt; 2.6 Removing age outliers sns_new &lt;- sns_new %&gt;% filter(age&gt;=13 &amp; age &lt;20) 2.7 normalizing Profiles interest variables sns_int &lt;- as.data.frame( apply(sns_new[,9:44],2,scale)) str(sns_int) ## &#39;data.frame&#39;: 23602 obs. of 36 variables: ## $ basketball : num -0.34 -0.34 -0.34 -0.34 -0.34 ... ## $ football : num -0.371 1.012 1.012 -0.371 -0.371 ... ## $ soccer : num -0.245 -0.245 -0.245 -0.245 -0.245 ... ## $ softball : num -0.226 -0.226 -0.226 -0.226 -0.226 ... ## $ volleyball : num -0.223 -0.223 -0.223 -0.223 -0.223 ... ## $ swimming : num -0.261 -0.261 -0.261 -0.261 -0.261 ... ## $ cheerleading: num -0.21 -0.21 -0.21 -0.21 -0.21 ... ## $ baseball : num -0.206 -0.206 -0.206 -0.206 -0.206 ... ## $ tennis : num -0.17 -0.17 -0.17 -0.17 -0.17 ... ## $ sports : num -0.308 -0.308 -0.308 -0.308 -0.308 ... ## $ cute : num -0.41 0.821 -0.41 0.821 -0.41 ... ## $ sex : num -0.182 -0.182 -0.182 -0.182 -0.182 ... ## $ sexy : num -0.272 -0.272 -0.272 -0.272 -0.272 ... ## $ hot : num -0.267 -0.267 -0.267 -0.267 -0.267 ... ## $ kissed : num -0.204 -0.204 -0.204 -0.204 -0.204 ... ## $ dance : num 0.476 -0.367 -0.367 -0.367 -0.367 ... ## $ band : num -0.288 -0.288 1.552 -0.288 0.632 ... ## $ marching : num -0.146 -0.146 -0.146 -0.146 3.21 ... ## $ music : num -0.635 1.019 0.192 -0.635 -0.635 ... ## $ rock : num -0.343 2.353 -0.343 1.005 -0.343 ... ## $ god : num -0.357 0.39 -0.357 -0.357 -0.357 ... ## $ church : num -0.302 -0.302 -0.302 -0.302 -0.302 ... ## $ jesus : num -0.202 -0.202 -0.202 -0.202 -0.202 ... ## $ bible : num -0.11 -0.11 -0.11 -0.11 -0.11 ... ## $ hair : num -0.39 4.93 -0.39 -0.39 -0.39 ... ## $ dress : num -0.255 8.489 -0.255 -0.255 -0.255 ... ## $ blonde : num -0.0485 -0.0485 -0.0485 -0.0485 -0.0485 ... ## $ mall : num -0.376 1.021 -0.376 -0.376 2.418 ... ## $ shopping : num -0.497 -0.497 -0.497 -0.497 -0.497 ... ## $ clothes : num -0.319 -0.319 -0.319 -0.319 -0.319 ... ## $ hollister : num -0.201 -0.201 -0.201 -0.201 5.477 ... ## $ abercrombie : num -0.186 -0.186 -0.186 -0.186 -0.186 ... ## $ die : num -0.302 -0.302 -0.302 -0.302 -0.302 ... ## $ death : num -0.27 -0.27 1.99 -0.27 -0.27 ... ## $ drunk : num -0.224 -0.224 -0.224 -0.224 -0.224 ... ## $ drugs : num -0.177 -0.177 -0.177 -0.177 -0.177 ... "],["modelling.html", "3 Modelling 3.1 initializing h2o session 3.2 clustering based on interest 3.3 creating h2o data frame 3.4 K- clusters from 3 to 30 3.5 Starting with 6 cluster 3.6 Plotting Elbow plot and finding optimum no. of K 3.7 Re-runing K-mean algorithm with 18 cluster 3.8 Goodness of Fit 3.9 Cluster labelling in dataset 3.10 Examining proportion of females in each cluster 3.11 Average no. of friends in each cluster 3.12 Lets examine profile with high no. of drugs and death words", " 3 Modelling 3.1 initializing h2o session h2o.init() ## Connection successful! ## ## R is connected to the H2O cluster: ## H2O cluster uptime: 29 minutes 7 seconds ## H2O cluster timezone: Asia/Kolkata ## H2O data parsing timezone: UTC ## H2O cluster version: 3.32.0.1 ## H2O cluster version age: 8 months and 4 days !!! ## H2O cluster name: H2O_started_from_R_varun_esn809 ## H2O cluster total nodes: 1 ## H2O cluster total memory: 1.55 GB ## H2O cluster total cores: 4 ## H2O cluster allowed cores: 4 ## H2O cluster healthy: TRUE ## H2O Connection ip: localhost ## H2O Connection port: 54321 ## H2O Connection proxy: NA ## H2O Internal Security: FALSE ## H2O API Extensions: Amazon S3, Algos, AutoML, Core V3, TargetEncoder, Core V4 ## R Version: R version 4.0.3 (2020-10-10) ## Warning in h2o.clusterInfo(): ## Your H2O cluster version is too old (8 months and 4 days)! ## Please download and install the latest version from http://h2o.ai/download/ 3.2 clustering based on interest 3.3 creating h2o data frame cnames &lt;- colnames(sns_int) clus.hex = as.h2o(sns_int) ## | | | 0% | |======================================================================| 100% 3.4 K- clusters from 3 to 30 p &lt;- seq(3,30,3) 3.5 Starting with 6 cluster mdl &lt;- h2o.kmeans(training_frame = clus.hex,x=cnames,k=6) ## | | | 0% | |======= | 10% | |======================================================================| 100% mdl ## Model Details: ## ============== ## ## H2OClusteringModel: kmeans ## Model ID: KMeans_model_R_1623566175150_25 ## Model Summary: ## number_of_rows number_of_clusters number_of_categorical_columns ## 1 23602 6 0 ## number_of_iterations within_cluster_sum_of_squares total_sum_of_squares ## 1 10 738694.73682 849636.00000 ## between_cluster_sum_of_squares ## 1 110941.26318 ## ## ## H2OClusteringMetrics: kmeans ## ** Reported on training data. ** ## ## ## Total Within SS: 738322.5 ## Between SS: 111313.5 ## Total SS: 849636 ## Centroid Statistics: ## centroid size within_cluster_sum_of_squares ## 1 1 20850.00000 431417.91323 ## 2 2 1.00000 0.00000 ## 3 3 1.00000 0.00000 ## 4 4 517.00000 29608.61042 ## 5 5 2044.00000 267203.23027 ## 6 6 189.00000 10092.70267 3.6 Plotting Elbow plot and finding optimum no. of K val &lt;- sapply(p, function(i){ mdl &lt;- h2o.kmeans(training_frame = clus.hex,x=cnames,k=i) h2o.tot_withinss(mdl) }) ## | | | 0% | |===================== | 30% | |======================================================================| 100% ## | | | 0% | |===================== | 30% | |======================================================================| 100% ## | | | 0% | |======================================================================| 100% ## | | | 0% | |======================================================================| 100% ## | | | 0% | |======================================================================| 100% ## | | | 0% | |======================================================================| 100% ## | | | 0% | |======================================================================| 100% ## | | | 0% | |======================================================================| 100% ## | | | 0% | |======================================================================| 100% ## | | | 0% | |======================================================================| 100% plot(p,val,type = &quot;l&quot;,main=&quot;Elbow Plot&quot;,xlab = &quot;K&quot;,ylab = &quot;Total Within Sum of Squares&quot;) Bend around K = 18 Evaluating Clustering with h2o package and base R 3.7 Re-runing K-mean algorithm with 18 cluster mdl18 &lt;- h2o.kmeans(training_frame = clus.hex,x=cnames,k=18) ## | | | 0% | |======================================================================| 100% mdl18 ## Model Details: ## ============== ## ## H2OClusteringModel: kmeans ## Model ID: KMeans_model_R_1623566175150_36 ## Model Summary: ## number_of_rows number_of_clusters number_of_categorical_columns ## 1 23602 18 0 ## number_of_iterations within_cluster_sum_of_squares total_sum_of_squares ## 1 10 613616.01105 849636.00000 ## between_cluster_sum_of_squares ## 1 236019.98895 ## ## ## H2OClusteringMetrics: kmeans ## ** Reported on training data. ** ## ## ## Total Within SS: 610439.2 ## Between SS: 239196.8 ## Total SS: 849636 ## Centroid Statistics: ## centroid size within_cluster_sum_of_squares ## 1 1 15891.00000 164834.22829 ## 2 2 1.00000 0.00000 ## 3 3 1.00000 0.00000 ## 4 4 1.00000 0.00000 ## 5 5 2.00000 666.51515 ## 6 6 60.00000 19932.59158 ## 7 7 189.00000 10134.45119 ## 8 8 1349.00000 73169.25517 ## 9 9 517.00000 18968.11824 ## 10 10 292.00000 13233.86216 ## 11 11 469.00000 24230.78742 ## 12 12 176.00000 25261.68570 ## 13 13 182.00000 9333.15162 ## 14 14 331.00000 22530.19726 ## 15 15 224.00000 9425.04183 ## 16 16 474.00000 20559.78941 ## 17 17 2706.00000 144601.74113 ## 18 18 737.00000 53557.80382 3.7.1 With base R Cluster Sizes Within Sum of Squares km &lt;- kmeans(sns_int,18) size &lt;- km$size wss &lt;- km$withinss size ## [1] 296 425 1195 1 2458 758 302 472 12592 200 556 1647 ## [13] 713 342 630 335 394 286 wss ## [1] 19878.06 17032.57 29080.80 0.00 101162.13 21262.44 12894.66 ## [8] 14762.75 104656.16 11035.62 26963.43 31061.63 38568.43 35402.55 ## [15] 34460.02 17137.45 15202.54 54601.87 3.8 Goodness of Fit Ratio of between Sum of Squares and Total sum of squares Ideally clustering that has the properties of internal cohesion and external separation, i.e. the ratio should approach 1. h2o.betweenss(mdl18)/h2o.totss(mdl18) ## [1] 0.2815285 Ratio is 0.24. Does not indicate good clustering With some very small cluster sizes indicates lots of outliers in different interest variables Also huge difference between largest and smallest cluster show, it may be large group of teens share similar interests 3.9 Cluster labelling in dataset predictions &lt;- h2o.predict(mdl18, clus.hex) ## | | | 0% | |======================================================================| 100% sns_new$clust &lt;- factor(as.vector(predictions)) 3.10 Examining proportion of females in each cluster fprop &lt;- sns_new %&gt;% group_by(clust) %&gt;% summarise(props=mean(gender_F),size=n()) fprop ## # A tibble: 18 x 3 ## clust props size ## * &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; ## 1 0 0.775 15891 ## 2 1 1 1 ## 3 2 1 1 ## 4 3 1 1 ## 5 4 1 2 ## 6 5 0.95 60 ## 7 6 0.757 189 ## 8 7 0.900 1349 ## 9 8 0.994 517 ## 10 9 0.822 292 ## 11 10 0.772 469 ## 12 11 0.773 176 ## 13 12 0.736 182 ## 14 13 0.779 331 ## 15 14 0.223 224 ## 16 15 0.905 474 ## 17 16 0.932 2706 ## 18 17 0.870 737 3.11 Average no. of friends in each cluster avgf &lt;- sns_new %&gt;% group_by(clust) %&gt;% summarise(avgf=mean(friends),size=n()) avgf ## # A tibble: 18 x 3 ## clust avgf size ## * &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; ## 1 0 28.4 15891 ## 2 1 44 1 ## 3 2 49 1 ## 4 3 162 1 ## 5 4 56.5 2 ## 6 5 31.1 60 ## 7 6 31.3 189 ## 8 7 39.2 1349 ## 9 8 40.2 517 ## 10 9 34.5 292 ## 11 10 32.9 469 ## 12 11 32.1 176 ## 13 12 32.3 182 ## 14 13 33.0 331 ## 15 14 31.2 224 ## 16 15 35.0 474 ## 17 16 37.7 2706 ## 18 17 30.1 737 3.12 Lets examine profile with high no. of drugs and death words hdd &lt;- sns_new %&gt;% filter(death&gt;5 | drugs&gt;5) hdd ## gradyear_2006 gradyear_2007 gradyear_2008 gradyear_2009 gender_F gender_M ## 1: 1 0 0 0 1 0 ## 2: 1 0 0 0 1 0 ## 3: 1 0 0 0 1 0 ## 4: 1 0 0 0 0 1 ## 5: 1 0 0 0 1 0 ## 6: 0 1 0 0 1 0 ## 7: 0 1 0 0 1 0 ## 8: 0 1 0 0 1 0 ## 9: 0 1 0 0 1 0 ## 10: 0 1 0 0 1 0 ## 11: 0 1 0 0 1 0 ## 12: 0 0 1 0 1 0 ## 13: 0 0 1 0 0 1 ## 14: 0 0 1 0 0 1 ## 15: 0 0 1 0 1 0 ## 16: 0 0 0 1 0 1 ## 17: 0 0 0 1 1 0 ## age friends basketball football soccer softball volleyball swimming ## 1: 18.360 8 0 0 0 0 0 0 ## 2: 18.587 0 0 0 0 1 0 0 ## 3: 19.502 52 0 0 0 0 0 0 ## 4: 18.598 24 0 0 0 0 0 0 ## 5: 18.661 14 0 0 0 0 0 0 ## 6: 18.084 2 0 11 0 0 0 0 ## 7: 17.440 162 0 1 0 0 0 0 ## 8: 17.060 41 0 0 0 0 0 0 ## 9: 17.410 43 0 1 0 0 0 0 ## 10: 13.544 95 0 1 0 0 1 0 ## 11: 18.119 44 0 2 0 0 0 1 ## 12: 16.561 42 0 0 0 0 0 0 ## 13: 16.778 5 5 0 0 0 0 0 ## 14: 16.906 9 0 0 0 0 0 0 ## 15: 17.166 1 0 0 0 0 0 0 ## 16: 15.316 27 0 0 0 0 0 0 ## 17: 15.222 46 0 1 1 0 0 0 ## cheerleading baseball tennis sports cute sex sexy hot kissed dance band ## 1: 0 0 0 0 0 0 0 0 0 0 0 ## 2: 0 0 0 0 1 0 0 0 0 2 0 ## 3: 0 0 0 0 0 0 0 0 0 0 0 ## 4: 0 0 0 2 0 1 1 0 0 0 0 ## 5: 0 0 0 0 0 4 0 0 0 0 0 ## 6: 6 0 0 7 8 21 1 1 9 12 7 ## 7: 1 1 0 1 4 4 2 0 2 6 3 ## 8: 0 0 0 0 14 6 5 0 2 1 3 ## 9: 0 0 0 0 2 9 2 0 1 3 0 ## 10: 0 0 0 1 0 0 0 0 0 1 0 ## 11: 0 0 0 0 1 22 1 0 0 1 1 ## 12: 0 0 0 0 2 0 0 0 0 2 0 ## 13: 0 2 0 0 0 0 0 0 0 0 0 ## 14: 0 0 0 0 2 2 0 0 1 0 0 ## 15: 0 0 0 0 0 0 0 0 0 0 0 ## 16: 0 0 0 0 0 1 0 0 0 0 1 ## 17: 0 0 0 1 11 2 1 2 8 10 0 ## marching music rock god church jesus bible hair dress blonde mall shopping ## 1: 0 0 0 0 0 0 0 0 0 0 0 0 ## 2: 0 2 1 0 1 0 0 0 0 0 0 0 ## 3: 0 0 0 0 0 0 0 0 0 0 0 0 ## 4: 0 0 0 3 2 0 0 0 0 0 0 0 ## 5: 0 1 0 1 0 0 0 6 0 1 1 0 ## 6: 0 12 2 4 5 0 0 27 0 1 2 8 ## 7: 1 8 3 6 1 0 1 1 1 0 2 0 ## 8: 0 5 9 1 0 0 0 3 5 0 0 1 ## 9: 0 0 1 3 0 0 0 3 1 0 0 0 ## 10: 0 0 0 1 5 1 0 0 0 0 0 0 ## 11: 0 0 1 10 0 1 0 12 2 327 0 0 ## 12: 0 0 1 1 0 3 0 9 0 0 1 0 ## 13: 0 2 0 2 0 0 0 9 0 0 3 0 ## 14: 0 1 0 6 0 0 3 3 0 1 1 0 ## 15: 0 1 0 2 0 0 0 8 0 0 3 0 ## 16: 0 0 0 1 0 0 0 0 0 0 0 0 ## 17: 0 1 0 6 0 0 0 8 2 0 4 1 ## clothes hollister abercrombie die death drunk drugs clust ## 1: 0 0 0 3 3 0 16 17 ## 2: 0 0 0 0 14 0 0 16 ## 3: 0 0 0 0 9 0 0 16 ## 4: 0 0 0 2 8 1 0 16 ## 5: 0 0 0 6 7 0 1 6 ## 6: 4 9 1 4 1 3 6 4 ## 7: 0 0 1 4 0 0 7 5 ## 8: 1 0 0 7 7 2 0 5 ## 9: 0 0 0 9 6 0 0 6 ## 10: 0 0 0 0 0 0 11 17 ## 11: 1 0 0 6 6 6 0 1 ## 12: 0 0 0 3 6 0 0 6 ## 13: 0 0 0 3 2 3 6 17 ## 14: 0 0 0 1 0 1 8 11 ## 15: 0 0 0 4 0 3 6 17 ## 16: 0 0 0 5 0 0 10 17 ## 17: 1 0 0 3 12 0 1 5 Most of them belong to cluster 8 and 12 "]]
