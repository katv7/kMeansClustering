x = ~cat1,
y = ~cat2,
marker = list(color = ~var2,
size=~var1 * size_multi,
colorscale = color_scale,
colorbar = list(len = 0.8, y = 0.3),
line = list(color = ~var2,
colorscale = color_scale,
width = 2)
),
showlegend = F)
p
p <- plot_ly(df,
type='scatter',
mode='markers',
x = ~cat1,
y = ~cat2,
marker = list(color = ~var2,
size=~var1 * size_multi,
colorscale = color_scale,
colorbar = list(len = 0.8, y = 0.3),
line = list(color = ~var2,
colorscale = color_scale,
width = 2)
),
showlegend = T)
p
markers = c(min(df$var1), mean(df$var1), max(df$var1))
for (i in 1:3) {
p <- add_trace(p,
df,
type = 'scatter',
mode = 'markers',
showlegend = T,
name = markers[[i]],
x = 'x',
y = 'x',
marker = list(size = markers[[i]] * size_multi,
color='rgba(255,255,255,0)',
showscale = F,
line = list(color = 'rgba(0,0,0,1)',
width = 2))
)
}
p
spacer <- 0.2
p <- layout(p, xaxis=list(range=c(-spacer, length(levels(df$cat1)) - 1 + spacer)), yaxis=list(range=c(-spacer, length(levels(df$cat1)) - 1 + spacer)))
p
df <- data.frame("X"=c(100,200,300),"Y"=c(1,2,3),"Z"=c("A","A","B"))
leg.size <- seq(min(df$X),max(df$X),min(df$X)/4)
fig <- plot_ly(data = df) %>% add_markers(x=~X,y=~Y,type = 'scatter',mode='markers',marker=list(size=~X,sizeref=10 ))
fig
fig <- plot_ly(data = df) %>% add_markers(x=~X,y=~Y,type = 'scatter',mode='markers',marker=list(size=~X,sizeref=10,symbol=~Z ))
fig
fig <- plot_ly(data = df) %>% add_markers(x=~X,y=~Y,symbol=~Z, type = 'scatter',mode='markers',marker=list(size=~X,sizeref=10 ))
fig
fig <- plot_ly(data = df) %>% add_markers(x=~X,y=~Y,symbol=~Z, type = 'scatter',mode='markers',marker=list(size=~X,sizeref=1 ))
fig
fig <- plot_ly(data = df) %>% add_markers(x=~X,y=~Y,symbol=~Z, type = 'scatter',mode='markers',marker=list(size=~X,sizeref=100 ))
fig
fig <- plot_ly(data = df) %>% add_markers(x=~X,y=~Y,symbol=~Z,size=~X, type = 'scatter',mode='markers',marker=list(sizeref=100 ))
fig
fig <- plot_ly(data = df) %>% add_markers(x=~X,y=~Y,symbol=~Z,size=~X, type = 'scatter',mode='markers',marker=list(sizeref=10 ))
fig
fig <- plot_ly(data = df) %>% add_markers(x=~X,y=~Y,symbol=~Z,size=~X, type = 'scatter',mode='markers',marker=list(sizeref=1 ))
fig
fig <- plot_ly(data = df) %>% add_markers(x=~X,y=~Y,symbol=~Z,size=~X, type = 'scatter',mode='markers',marker=list(sizeref=0.1 ))
fig
library(ggplot2)
df <- data.frame(a=c(1,2,3,4,5,6),b=c(3,5,2,6,8,1),c=c("p","p","q","r","r","r"),
d=c("v","v","w","v","v","v"), stringsAsFactors= F)
ggplot(df,aes(x=a,y=b,col=c))+geom_point()
ggplot(df,aes(x=a,y=b,col=c,shape=d))+geom_point()
ggplotly(ggplot(df,aes(x=a,y=b,col=c,shape=d))+geom_point())
ggplotly(ggplot(df,aes(x=a,y=b))+geom_point(aes(col=c)))
ggplotly(ggplot(df,aes(x=a,y=b))+geom_point(aes(col=c))+ geom_point(aes(shape=d)) )
ggplotly(ggplot(df,aes(x=a,y=b))+geom_point(aes(col=c)) )
ggplot(df,aes(x=a,y=b))+geom_point(aes(col=c))+geom_point(aes(shape=d))
ggplotly(ggplot(df,aes(x=a,y=b,col=c))+geom_point(aes(shape=d)) )
library(ggiraph)
ggplot(df)+geom_point_interactive(aes(x=a,y=b,col=c,shape=d))
gh <- ggplot(df)+geom_point_interactive(aes(x=a,y=b,col=c,shape=d))
girafe(ggobj = gh)
gh <- ggplot(df)+geom_point_interactive(aes(x=a,y=b,col=c,shape=d,tooltip) )
gh <- ggplot(df)+geom_point_interactive(aes(x=a,y=b,col=c,shape=d,tooltip=a) )
girafe(ggobj = gh)
gh <- ggplot(df)+geom_point_interactive(aes(x=a,y=b,col=c,shape=d,data_id = a) )
girafe(ggobj = gh)
gh <- ggplot(df)+geom_point_interactive(aes(x=a,y=b,col=c,shape=d,tooltip = paste(a," ",b)) )
girafe(ggobj = gh)
gh <- ggplot(df)+geom_point_interactive(aes(x=a,y=b,col=c,shape=d,tooltip = paste(a," ",b," ",c)) )
girafe(ggobj = gh)
gh <- ggplot(df)+geom_point_interactive(aes(x=a,y=b,col='blue',shape=d,tooltip = paste(a," ",b," ",c)) )
girafe(ggobj = gh)
gh <- ggplot(df)+geom_point_interactive(aes(x=a,y=b,col=NULL,shape=d,tooltip = paste(a," ",b," ",c)) )
girafe(ggobj = gh)
gh <- ggplot(df)+geom_point_interactive(aes(x=a,y=b,col=NA,shape=d,tooltip = paste(a," ",b," ",c)) )
girafe(ggobj = gh)
gh <- ggplot(df)+geom_point_interactive(aes(x=a,y=b,col=NULL,shape=d,tooltip = paste(a," ",b," ",c)) )
girafe(ggobj = gh)
gh <- ggplot(df)+geom_point_interactive(aes(x=a,y=b,col=NULL,shape=NULL,tooltip = paste(a," ",b," ",c)) )
girafe(ggobj = gh)
Series 2 = c(8, 8, 1, 1, 2, 2, 2, 1, 1, 8)
Series1 = C(9, 2, 1, 10, 5, 2 ,2, 8, 6, 2)
Series1 = c(9, 2, 1, 10, 5, 2 ,2, 8, 6, 2)
Series2 = c(8, 8, 1, 1, 2, 2, 2, 1, 1, 8)
mean(Series1)
hist(Series1)
hist(Series2)
mean(Series1)
mean(Series2)
median(Series1)
median(Series2)
Series1 = c(9, 2, 1, 10, 5, 2 ,2, 8, 6, 2)
Series2 = c(8, 8, 1, 1, 2, 2, 2, 1, 1, 8)
hist(Series1)
IQR(Series1)
IQR(Series2)
IQR(Series1)
IQR(Series2)
sd(Series1)
sd(Series2)
library(keras)
cifar <- dataset_cifar10()
str(cifar)
f <- cifar$train$x[1,]
f <- str(cifar$train$x)
f
f <- dim(cifar$train$x)
f <- dim(cifar$train$x[1])
f <- dim(cifar$train$x[1,1:32,1:32,1])
f
f <- dim(cifar$train$x[1,1,1,1])
f <- dim(cifar$train$x)
f <- cifar$train$x[1,,,1]
f
f <- cifar$train$x[1,,,4]
f <- cifar$train$x[1,,,3]
library(EBimage)
install.packages("BiocManager")
BiocManager::install("EBImage")
display()
EBImage
library(EBImage)
display(cifar$train$x[1,,,3])
display(cifar$train$x[1,,,2])
display(cifar$train$x[1,,,1])
display(cifar$train$x[1,,,1]/255)
display(cifar$train$x[1,,,2]/255)
display(cifar$train$x[2,,,2]/255)
display(cifar$train$x[2,,,1]/255+cifar$train$x[2,,,2]/255+cifar$train$x[2,,,3]/255)
display(cifar$train$x[2,,,1]/255)
summary(cifar$train$x[2,,,1]/255)
class(cifar$train$x[2,,,1]/255)
as.matrix(cifar$train$x[2,,,1]/255)
summary(as.matrix(cifar$train$x[2,,,1]/255))
display(as.matrix(cifar$train$x[2,,,1]/255))
display(as.matrix(cifar$train$x[2,,,]/255))
display(as.matrix(cifar$train$x[2,,,1]/255))
as.raster(cifar$train$x[2,,,1]/255)
plot(as.raster(cifar$train$x[2,,,1]/255))
display(as.matrix(cifar$train$x[2,,,1]/255))
r <- cifar$train$x[2,,,1]/255
g <- cifar$train$x[2,,,2]/255
b <- cifar$train$x[2,,,3]/255
library(grid)
col <- rgb(r, g, b)
dim(col) <- dim(r)
dim(r)
dim(col)
grid.raster(col, interpolate=FALSE)
plot(as.raster(g))
plot(as.raster(b))
plot(as.raster(r))
r <- cifar$train$x[3,,,1]/255
g <- cifar$train$x[3,,,2]/255
b <- cifar$train$x[3,,,3]/255
plot(as.raster(r))
plot(as.raster(g))
plot(as.raster(b))
r <- cifar$train$x[4,,,1]/255
g <- cifar$train$x[4,,,2]/255
b <- cifar$train$x[4,,,3]/255
plot(as.raster(b))
plot(as.raster(g))
plot(as.raster(r))
?cifar
??cifar
grid.raster(cifar$train$x[4,,,]/255)
grid.raster(cifar$train$x[5,,,]/255)
grid.raster(cifar$train$x[6,,,]/255)
grid.raster(cifar$train$x[7,,,]/255)
grid.raster(cifar$train$x[8,,,]/255)
grid.raster(cifar$train$x[9,,,]/255)
grid.raster(cifar$train$x[10,,,]/255)
grid.raster(cifar$train$x[11,,,]/255)
grid.raster(cifar$train$x[12,,,]/255)
grid.raster(cifar$train$x[13,,,]/255)
grid.raster(cifar$train$x[14,,,]/255)
grid.raster(cifar$train$x[15,,,]/255)
grid.raster(cifar$train$x[16,,,]/255)
grid.raster(cifar$train$x[17,,,]/255)
grid.raster(cifar$train$x[18,,,]/255)
grid.raster(cifar$train$x[18,,,])
grid.raster(cifar$train$x[18,,,]/255)
print(cifar$train$x[18,,,]/255)
train <- cifar$train$x
dim(train)
summary(cifar$train$x[18,,,]/255)
plot(cifar$train$x[18,,,]/255)
par(mfrow=c(4,5))
for (i in 1:20) {
grid.raster(cifar$train$x[i,,,]/255)
}
plot(grid.raster(cifar$train$x[2,,,]/255))
for (i in 1:20) {
grid.raster(cifar$train$x[2,,,]/255)
}
library(countcolors)
install.packages("countcolors")
library(countcolors)
plotArrayAsImage(cifar$train$x[2,,,]/255, main = "My Image")
par(mfrow=c(4,5))
for (i in 1:20) {
plotArrayAsImage(cifar$train$x[i,,,]/255, main = "My Image")
}
par(mfrow=c(6,6))
for (i in 1:36) {
plotArrayAsImage(cifar$train$x[i,,,]/255, main = "My Image")
}
par(mfrow=c(1,1))
x <- tile(cifar$train$x[1:10,,,]/255)
display(x)
x <- tile(cifar$train$x[1:10,,,]/255,5)
display(x)
plotArrayAsImage(cifar$train$x[2,,,]/255, main = "My Image")
test <- cifar$test$x
plotArrayAsImage(cifar$test$x[2,,,]/255, main = "My Image")
trainy <- cifar$train$y
trainy <- cifar$train$y[,1]
testy <- cifar$test$y[,1]
trainLabels <- to_categorical(trainy)
testLabels <- to_categorical(testy)
df <- read.csv(file.choose())
df$newQuality <- ifelse(df$quality<6,"Bad","Good")
df$quality <- NULL
head(df)
library(MASS)
ld <- lda(newQuality~.,data = df)
ld
summary(ld)
dfscale <- scale(df[,-12])
head(dfscale)
dfscale <- data.frame(scale(df[,-12]))
head(dfscale)
dfscale$quality <- df$newQuality
lds <- lda(quality~.,data = dfscale)
lds
library(mongolite)
url <-  "mongodb+srv://varunk:supernova@mern.dnf5b.mongodb.net/test"
mongo2 <- mongo(collection = "irisd", db = "irisdata",
url = url,
verbose = TRUE)
mongo2$insert(iris)
oo <- iris[c(2,5),]
#insert data into databse collection
mongo2$insert(oo)
data <- mongo2$find(query = '{}')
library(jsonlite)
toJSON(oo)
toJSON(oo)[1]
length(toJSON(oo))
class(toJSON(oo))
jsn <- toJSON(oo)
mongo2$insert(jsn)
fromJSON(jsn)
mongo2$insert(fromJSON(jsn))
jdata <- c(' {
"id": 4,
"name": "Patricia Lebsack",
"username": "Karianne",
"email": "Julianne.OConner@kory.org",
"address": {
"street": "Hoeger Mall",
"suite": "Apt. 692",
"city": "South Elvis",
"zipcode": "53919-4257",
"geo": {
"lat": "29.4572",
"lng": "-164.2990"
}
},
"phone": "493-170-9623 x156",
"website": "kale.biz",
"company": {
"name": "Robel-Corkery",
"catchPhrase": "Multi-tiered zero tolerance productivity",
"bs": "transition cutting-edge web services"
}
}',
'{
"id": 5,
"name": "Chelsey Dietrich",
"username": "Kamren",
"email": "Lucio_Hettinger@annie.ca",
"address": {
"street": "Skiles Walks",
"suite": "Suite 351",
"city": "Roscoeview",
"zipcode": "33263",
"geo": {
"lat": "-31.8129",
"lng": "62.5342"
}
},
"phone": "(254)954-1289",
"website": "demarco.info",
"company": {
"name": "Keebler LLC",
"catchPhrase": "User-centric fault-tolerant solution",
"bs": "revolutionize end-to-end systems"
}
} ')
for (i in jdata) {
fromJSON(i)
}
for (i in jdata) {
print(fromJSON(i))
}
for (i in jdata) {
data.frame(fromJSON(i))
}
for (i in jdata) {
print(data.frame(fromJSON(i)))
}
for (i in jdata) {
print(data.frame(fromJSON(i)))
}
iris$Species
iris$Sepal.Length
data2 <- mongo2$find(query = '{"Species" : "setosa", "Sepal.Length" : { "$lt" : 5.0 } }')
data2 <- mongo2$find(query = '{"Species" : "setosa"}')
data2 <- mongo2$find(query = '{"Sepal.Length" : { "$lt" : 5.0 } }')
data2 <- mongo2$find(query = '{"Sepal.Length" : { "$lt" : 20 } }')
data2 <- mongo2$find(query = '{"Sepal_Length" : { "$lt" : 5 } }')
data2 <- mongo2$find(query = '{"Sepal_Length" : { "$lt" : 5 },"Species":"setosa" }')
data2
mongo2$index(add = '{"Sepal_Length":1}')
library(httr)
library(jsonlite)
url <- "https://community-open-weather-map.p.rapidapi.com/weather"
r <- GET(url,
add_headers('x-rapidapi-key'= "1a749ec452msh7a9b474f5c35425p15b2a1jsn1d3cf583e861",
'x-rapidapi-host'="community-open-weather-map.p.rapidapi.com",
useQueryString=TRUE,
content_type="application/octet-stream"),
query=list( 	"q"= "London,uk",
"lat"= "0",
"lon"= "0",
"callback"="",
"id"="2172797",
"lang"="null",
"units"= "\"metric\" or \"imperial\"",
"mode"= "xml, html" )  )
v <- content(r, "text", encoding = "ISO-8859-1")
output <- fromJSON(v)
data.frame(output)
install.packages(c('rzmq','repr','IRkernel','IRdisplay', 'pbdZMQ'),
repos = c('http://irkernel.github.io/', getOption('repos')),
type = 'source')
install.packages("IRkernel")
IRkernel::installspec()
install.packages("manipulate")
library(dslabs)
library(ggplot2)
library(dplyr)
library(caTools)
library(caret)
library(MASS)
library(data.table)
library(stringr)
library(lubridate)
library(randomForest)
ratings <- fread(text = gsub("::", "\t", readLines("ratings.dat")),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines("movies.dat"), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(movieId),
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
set.seed(1, sample.kind="Rounding") # if using R 3.5 or earlier, use `set.seed(1)`
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(ratings, movies, test_index, temp, movielens, removed)
edx$dtype <- c('train')
validation$dtype <- c('validation')
data_combined <- rbind(edx,validation)
#edx$no_of_genres = str_count(edx$genres, pattern = "\\|")+1
data_combined$no_of_genres <- str_count(data_combined$genres, pattern = "\\|")+1
str(data_combined)
data_combined$year <- as.numeric(gsub(".*\\((.*)\\).*", "\\1", data_combined$title))
str(data_combined)
head(data_combined)
data_combined$release_period <- ifelse(data_combined$year<1950,"Pre-1950",ifelse(data_combined$year<1990,'1950-1980',ifelse(data_combined$year<2000,'1980-2000','2000s')))
filteredGen <- data_combined %>% filter(no_of_genres==1)
movie_genres <- unique(filteredGen$genres)
rm(filteredGen)
movie_genres
for (i in movie_genres) {
data_combined[,i] <- as.numeric(str_detect(data_combined$genres,i))
}
data_combined$release_period <- factor(data_combined$release_period)
data_combined[,'SciFi'] <- data_combined$`Sci-Fi`
data_combined$`Sci-Fi` <- NULL
edx <- data_combined %>% filter(dtype=='train')
validation <- data_combined %>% filter(dtype=='validation')
most_rated_films <- edx %>% group_by(title) %>% summarise('n'=n()) %>% arrange(desc(n))
most_rated_films[1:10,]
most_rated_films_5star[1:10,]
most_rated_films_5star <- edx %>% filter(rating==5)   %>% group_by(title) %>% summarise('n'=n()) %>% arrange(desc(n))
most_rated_films_5star[1:10,]
top_action <- edx %>% filter(str_detect(genres,'Action')) %>% group_by(title) %>% summarise('n'=n()) %>% arrange(desc(n))
top_action[1:10,]
top_horror <- edx %>% filter(str_detect(genres,'Horror')) %>% group_by(title) %>% summarise('n'=n()) %>% arrange(desc(n))
top_horror[1:10,]
randomForest(iris[,-c(1)],iris[,5])
splitter  <- sample.split(edx$rating ,SplitRatio = 0.8)
train <- edx[splitter,]
test <- edx[!splitter,]
str(train)
rf <- randomForest(rating~.-userId-movieId-timestamp-title-genres-dtype-no_of_genres-year,data = train)
trainSmall <- train[1:1000000,]
str(train)
rf <- randomForest(rating~.-userId-movieId-timestamp-title-genres-dtype-no_of_genres-year,data = trainSmall)
data_combined[,'FilmNoir'] <- data_combined$`Film-Noir`
ratings <- fread(text = gsub("::", "\t", readLines("ratings.dat")),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines("movies.dat"), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(movieId),
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
set.seed(1, sample.kind="Rounding") # if using R 3.5 or earlier, use `set.seed(1)`
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(ratings, movies, test_index, temp, movielens, removed)
edx$dtype <- c('train')
validation$dtype <- c('validation')
data_combined <- rbind(edx,validation)
length(intersect(edx$userId,validation$userId))
length(intersect(edx$movieId,validation$movieId))
write.csv(edx,'train.csv')
write.csv(validation,'test.csv')
write.csv(edx,'train.csv')
write.csv(validation,'test.csv')
write.csv(edx,'train.csv')
write.csv(validation,'test.csv')
write.csv(edx,'train.csv',row.names=F)
write.csv(validation,'test.csv',row.names=F)
library(dslabs)
movielens
write.csv(movielens,'movieRatings.csv',row.names = F)
setwd("~/RFiles")
movies <- read.csv('mvies.csv')
user <- read.csv('userratings.csv')
head(user)
usernew <- user[,1:3]
head(movies)
library(dplyr)
library(ggplot2)
movies$movieID <- movies$id
movies$id <- NULL
joinedData <- usernew %>% left_join(movies,by = 'movieID')
str(joinedData)
str(movies)
sum(is.na(movies$rtAllCriticsRating))
joinedData %>% filter(movieID==3)
summary(joinedData)
average_rating<-group_by(joinedData,movieID,title)%>%summarize(count = n(),avg_rating = mean(rating))
head(average_rating)
length(unique(joinedData$movieID))
length(unique(movieID$movieID))
length(unique(movies$movieID))
length(unique(usernew$movieID))
trainSize = floor(0.8*nrow(joinedData))
trainIndex = sample(seq_len(nrow(joinedData)),size = trainSize)
train <-joinedData[trainIndex,]
test<- joinedData[-trainIndex,]
overall_avg_rating = mean(train$rating)
test_predictions_baseline <- mutate(test, overall_avg_rating= overall_avg_rating)
predicted_rating_model_1 <- group_by(train, movieID, title) %>% summarize(avg_rating= mean(rating))
test_prediction_model_1 <-inner_join(test,predicted_rating_model_1,key = "movieID")
head(test_prediction_model_1)
test_prediction_model_1 <-left_join(test,predicted_rating_model_1,key = "movieID")
sum(is.na(test_prediction_model_1$avg_rating))
install.packages("bookdown")
library(bookdown)
setwd("~/RFiles/KmeanCLustring")
